---
import Modal from './Modal.astro';
import FormattedDate from './FormattedDate.astro';
import { getEntry, render } from 'astro:content';


interface Props {
    customCss: String;
}
const { customCss } = Astro.props;

const privacy = await getEntry('blog', 'privacy');

// Extract the frontmatter pubDate from the entryâ€™s data
const { pubDate } = privacy.data;

const { Content } = await render(privacy);
---
<footer>
    <div class={`flex flex-row${customCss}`}>
        <i class="text-link ri-user-voice-line ri-md"></i>
        <span class="text-subText text-sm pl-[0.375rem] text-justify font-sans">
            Feedback, suggestions, or wanna get in touch? <span class="border-b-2 border-dashed border-subText text-subText font-bold"><a href="mailto:rpartha1@pm.me">I'd love to hear about it</a></span>.
            <a href="#"><i class="text-link ri-arrow-up-line md:ri-lg max-sm:ri-xs"></i></a>
        </span>
    </div>
    <div class={`mt-1 flex flex-row${customCss}`}>
        <i class="text-link ri-copyright-line ri-md ml-[-0.08rem]"></i>
        <span class="text-subText text-sm pl-[0.375rem] text-justify font-sans whitespace-nowrap">
        <span id="current-year"></span> RAMASESHAN PARTHASARATHY
        </span>
    </div>
    <div class={`mt-1 flex flex-row${customCss}`}>
        <i class="text-link ri-shield-check-line ri-md ml-[-0.08rem]"></i>
        <span class="text-subText text-sm pl-[0.375rem] text-justify font-sans">
            Read about our <span class="border-b-2 border-dashed border-subText text-subText font-bold"><a id = "openModalLink" href="#">privacy statement</a></span>.
        </span>
    </div>

    <Modal id="privacyModal">
        <fragment slot="header">
            <h2 class="text-xl font-serif text-link">Privacy Statement</h2>
        </fragment>

        <fragment slot="content">
            <div class="space-y-4 overflow-y-auto max-h-[70vh] pr-4" id="modalScrollableContent">
                <span class="font-sans font-bold text-md lu">Last Updated: <FormattedDate date={pubDate} iso={false}/></span>
                <Content pubDate={pubDate}/>
            </div>
        </fragment>

        <fragment slot="footer">
            <div class="p-4 bg-gray-50 rounded-b-lg flex justify-end">
                <button
                    id="acceptPrivacy"
                    class="px-4 py-2 text-agree font-bold rounded-md"
                >
                    <i class="ri-checkbox-circle-line"></i> ACCEPT
                </button>
            </div>
        </fragment>
    </Modal>
</footer>

<script>
// Get DOM elements
const modal = document.getElementById('privacyModal') as HTMLDialogElement;
const openModalLink = document.getElementById('openModalLink') as HTMLAnchorElement;
const acceptButton = document.getElementById('acceptPrivacy') as HTMLButtonElement;
const modalContent = document.getElementById('modalScrollableContent') as HTMLElement; // Scrollable area

if (modal && openModalLink && acceptButton && modalContent) {
  // Initially disable the accept button
  acceptButton.setAttribute('disabled', 'true');
  acceptButton.classList.add('opacity-50', 'cursor-not-allowed');

  // Prevent page scrolling when modal opens
  const openModal = () => {
    modal.showModal();
    document.body.style.overflow = 'hidden'; // Stop page scroll
  };

  // Allow page scrolling when modal closes
  const closeModal = () => {
    modal.close();
    document.body.style.overflow = ''; // Restore page scroll
  };

  // Check if user scrolled to the bottom of modal content
  const checkScroll = () => {
    const isScrolledToBottom =
      modalContent.scrollHeight - modalContent.scrollTop <= modalContent.clientHeight + 1;

    if (isScrolledToBottom) {
      acceptButton.removeAttribute('disabled');
      acceptButton.classList.remove('opacity-50', 'cursor-not-allowed');
    }
  };

  // Event listeners
  openModalLink.addEventListener('click', (e) => {
    e.preventDefault();
    openModal();
  });

  modalContent.addEventListener('scroll', checkScroll);

  // Disable ESC until user scrolls down
  modal.addEventListener('cancel', (e) => {
    if (acceptButton.hasAttribute('disabled')) {
      e.preventDefault();
    }
  });

  // Accept button closes modal
  acceptButton.addEventListener('click', closeModal);

  // Click outside modal closes it only if scrolling is complete
  modal.addEventListener('click', (e) => {
    const dialogDimensions = modal.getBoundingClientRect();
    if (
      e.clientX < dialogDimensions.left ||
      e.clientX > dialogDimensions.right ||
      e.clientY < dialogDimensions.top ||
      e.clientY > dialogDimensions.bottom
    ) {
      if (!acceptButton.hasAttribute('disabled')) {
        closeModal();
      }
    }
  });
}

// Set current year dynamically
const currentYearElement = document.getElementById('current-year');
if (currentYearElement) {
  currentYearElement.textContent = new Date().getFullYear().toString();
}


</script>
